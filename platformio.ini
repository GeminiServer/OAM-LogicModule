##
#  OpenKNX - LogicModule
#  PlatformIO Project Configuration File
#
#  Documentation: 
#  - Application description: /doc/Applikationsbeschreibung-Logik.md
#  - Pio Setup: /doc/OpenKNX-PIO-dev-setup.md
##

[platformio]
libdeps_dir = ~/.platformio/lib       # common libs (lib_deps) for all projects! 
packages_dir = ~/.platformio/packages # common platform / framework / boards / ... for all projects!
;packages_dir = .pio/pack
;build_cache_dir  = .pio/cache
;cache_dir = .pio/cache
src_dir = .

# Build all releases. Optional choose and uncomment upload
default_envs = 
  release_SAMD_Masifi_v30       # Build SAMD_Masifi_v30 release.
  ;upload_UBS_SAMD_Masifi_v30     # Uncomment to upload via USB
  ;upload_JLINK_SAMD_Masifi_v30   # Uncomment to upload via JLINK
  
  release_SAMD_Masifi_v31       # Build SAMD_Masifi_v31 release.
  ;upload_UBS_SAMD_Masifi_v31     # Uncomment to upload via USB
  ;upload_JLINK_SAMD_Masifi_v31   # Uncomment to upload via JLINK
  
  release_Masifi_RP2040         # Build Masifi_RP2040 release.
  ;upload_USB_Masifi_RP2040       # Uncomment to upload via USB
  ;upload_JLINK_Masifi_RP2040     # Uncomment to upload via JLINK

  release_SAMD_XIAO             # Build SAMD_XIAO release.
  ;upload_USB_SAMD_XIAO           # Uncomment to upload via USB
  ;upload_JLINK_SAMD_XIAO         # Uncomment to upload via JLINK

  release_Seeeduino_RP2040      # Build Seeeduino_RP2040 release.
  ;upload_USB_Seeeduino_RP2040    # Uncomment to upload via USB
  ;upload_JLINK_Seeeduino_RP2040  # Uncomment to upload via JLINK


# Example for Enduser envs
# ;default_envs = enduser_samd, enduser_rp2040


#
# Common settings for all envs
#
[common]
framework = arduino
build_flags = 
  # optimize knx stack
  -D SMALL_GROUPOBJECT
  -D LOGICMODULE
  -D MASK_VERSION=0x07B0
    # use flash directly
    # flash start at 1.5MiB
  -D KNX_FLASH_SIZE=0x4000
  -D KNX_FLASH_OFFSET=0x180000 
  # use EEPROM emulation
  ;-D DEBUG_TIMING
  ;-D LOGIC_TRACE
  -Wno-unknown-pragmas 
  -Wno-switch
  # debug timing in knx stack

monitor_speed = 115200

extra_scripts = 
   pre:scripts/get_platform_packages.py

lib_deps =
  https://github.com/thelsing/knx               ; Latest OpenKNX stack 
  https://github.com/OpenKNX/OGM-Common         ; Common
  https://github.com/OpenKNX/OAM-LogicModule    ;

lib_ldf_mode = deep+
lib_extra_dirs = 
  ${PROJECT_DIR}\..

debug_tool = jlink
debug_build_flags = -O0 -ggdb3
debug_extra_cmds = 
  set output-radix 16

[common_rp2040]
extends = common
platform = https://github.com/mumpf/platform-raspberrypi.git
board = pico
board_build.core = earlephilhower
# configure filesystem size. Default 0 Mbyte.
# board_build.filesystem_size = 1M
# inject core package.. not yet registered with PlatformIO
# registry, so pull working version directly from git / download page.
# note that download link for toolchain is specific for OS. see https://github.com/earlephilhower/pico-quick-toolchain/releases.

platform_packages =
    # Common packages
    ;mumpf/framework-arduinopico@https://github.com/mumpf/arduino-pico.git
    maxgerhardt/framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git
platform_packages_macos =
    # For Build under MacOS 
    ;maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.2-a/x86_64-apple-darwin14.arm-none-eabi-9d55fd1.220202.tar.gz
    maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.3-a/x86_64-apple-darwin14.arm-none-eabi-ed6d983.220212.tar.gz
    
platform_packages_win32 =
    # For Build under Windows 
    maxgerh ardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.2-a/x86_64-w64-mingw32.arm-none-eabi-9d55fd1.220202.zip
    ; for Local
    ;maxgerhardt/framework-arduinopico@file://c:\users\d019748\platformio\arduino-pico

platform_packages_linux =
    # For Build under Linux
    maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.3-a/x86_64-linux-gnu.arm-none-eabi-ed6d983.220212.tar.gz
    ;maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.2-a/x86_64-linux-gnu.arm-none-eabi-9d55fd1.220202.tar.gz
    
;lib_ignore = Adafruit TinyUSB Library ; Only with older framework-arduinopico < 2.0.0

build_flags =
  ${common.build_flags}
  -D SERIAL_DEBUG=Serial
  ; -D USE_RP2040_EEPROM_EMULATION
  ; -D USE_RP2040_LARGE_EEPROM_EMULATION
  -frtti
  
lib_deps = 
  ${common.lib_deps}
  ;adafruit/Adafruit SleepyDog Library @ ^1.4.0
  ;Wire
  ;SPI


#
# Common settings
# SAMD
#
[common_samd]
extends = common
platform = atmelsam
build_flags = 
  ${common.build_flags}
  -D SERIAL_DEBUG=SerialUSB
  # use EEPROM emulation
  ; -D USE_SAMD_EEPROM_EMULATION
  ; -D CRYSTALLESS
  ; -D WATCHDOG
  -Wno-unknown-pragmas 
  -Wno-switch
lib_deps = 
  ${common.lib_deps}
  adafruit/Adafruit SleepyDog Library @ 1.4.0
;   Wire
;   SPI


#
# Build and Upload Release Environments
#

## SAMD Board Masifi v31
[env:release_SAMD_Masifi_v31]
extends = common_samd
board = zeroUSB
lib_deps =
  ${common.lib_deps}
  https://github.com/OpenKNX/OGM-SensorDevices  ; Sensor Deivces
build_flags =
  ${common_samd.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V31
#
[env:upload_JLINK_SAMD_Masifi_v31]
extends = release_SAMD_Masifi_v31
upload_protocol = jlink
#
[env:upload_UBS_SAMD_Masifi_v31]
extends = release_SAMD_Masifi_v31
upload_protocol = sam-ba
extra_scripts =
  ${common.extra_scripts}
  ;post:scripts/Upload-Firmware-SAMD-v30.ps1 ;; ToDo needs to converted to python
  ;post:scripts/Upload-Firmware-SAMD-v31.ps1 ;; ToDo needs to converted to python
##

## SAMD Board Masifi v30
[env:release_SAMD_Masifi_v30]
extends = common_samd
board = zeroUSB
lib_deps =
  ${common.lib_deps}
  https://github.com/OpenKNX/OGM-SensorDevices  ; Sensor Deivces
build_flags =
  ${common_samd.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V3
#
[env:upload_JLINK_SAMD_Masifi_v30]
extends = release_SAMD_Masifi_v30
upload_protocol = jlink
#
[env:upload_UBS_SAMD_Masifi_v30]
extends = release_SAMD_Masifi_v30
upload_protocol = sam-ba
extra_scripts =
  ${common.extra_scripts}
  ;post:scripts/Upload-Firmware-SAMD-v30.ps1 ;; ToDo needs to converted to python
  ;post:scripts/Upload-Firmware-SAMD-v31.ps1 ;; ToDo needs to converted to python
##

## SAMD Board Seeed Xiao (SAMD21)
[env:release_SAMD_XIAO]
extends = common_samd
board = seeed_xiao
upload_port = /dev/cu.usbmodem14301
upload_speed = 115200
monitor_port = /dev/cu.usbmodem14301
monitor_speed = 115200
lib_deps =
  ${common.lib_deps}
  https://github.com/GeminiServer/OGM-SensorDevices
build_flags =
  ${common_samd.build_flags}
  -D DEBUG_DELAY=100
  -D ARDUINO_ARCH_SAMD
  -D BOARD_SEEEDUINO_XIAO
#
[env:upload_JLINK_SAMD_XIAO]
extends = release_SAMD_XIAO
upload_protocol = jlink
#
[env:upload_USB_SAMD_XIAO]
extends = release_SAMD_XIAO
upload_protocol = sam-ba
extra_scripts =
  ${common.extra_scripts}
  ;post:scripts/Upload-Firmware-SAMD-v30.ps1 ;; ToDo needs to converted to python
  ;post:scripts/Upload-Firmware-SAMD-v31.ps1 ;; ToDo needs to converted to python
##

## Board Masifi RP2040
[env:release_Masifi_RP2040]
extends = common_rp2040
  ${common.lib_deps}
  https://github.com/OpenKNX/OGM-SensorDevices  ; Sensor Deivces
build_flags =
  ${common_rp2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_HFPM_DEVEL
#
[env:upload_JLINK_Masifi_RP2040]
extends = release_Masifi_RP2040
upload_protocol = jlink
#
[env:upload_USB_Masifi_RP2040]
extends = release_Masifi_RP2040
upload_protocol = picotool
extra_scripts = 
 ;post:scripts/Upload-Firmware-RP2040.ps1 ;; ToDo needs to converted to python
##

## Board Seeeduino RP2040
[env:release_Seeeduino_RP2040]
extends = common_rp2040
lib_deps =
  ${common.lib_deps}
  https://github.com/GeminiServer/OGM-SensorDevices
upload_port = /dev/cu.usbmodem14301
upload_speed = 115200
monitor_port = /dev/cu.usbmodem14301
monitor_speed = 115200
build_flags =
  ${common_rp2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_SEEEDUINO_RP2040
#
[env:upload_JLINK_Seeeduino_RP2040]
extends = release_Seeeduino_RP2040
upload_protocol = jlink
#
[env:upload_USB_Seeeduino_RP2040]
extends = release_Seeeduino_RP2040
upload_protocol = picotool
extra_scripts = 
 ;post:scripts/Upload-Firmware-RP2040.ps1 ;; ToDo needs to converted to python
##


#
# Those are examples for enduser compiled environments
#
## Build and Upload samd board masifi V2 
[env:enduser_samd] 
extends = common_samd
upload_protocol = sam-ba
build_flags =
  ${common_samd.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V2
##

## Build and Upload rp2040 board masifi
[env:enduser_rp2040] 
extends = common_rp2040
build_flags =
  ${common_rp2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_HFPM_DEVEL
##